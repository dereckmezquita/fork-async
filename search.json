[{"path":"https://dereckmezquita.github.io/fork-async/articles/async-example.html","id":"find-the-fastest-cran-mirror-in-the-us","dir":"Articles","previous_headings":"","what":"Find the fastest CRAN mirror in the US","title":"Examples for the async package","text":"Get URLs US CRAN mirrors, ’ll use later. response_time() async function returns total response time HEAD request single URL. http_stop_for_status() similar httr::stop_for_status(), throws error status code 400 higher. () error happen, just return Inf URL. also add URL result, name. Let’s try , real CRAN URL, test one returns HTTP 404 status code. fastest_urls() run response_time() supplied URLs, stop soon 10 respond. sort results, fastest response first. Let’s run real data.","code":"mirrors <- getCRANmirrors() mirror_urls <- mirrors$URL[mirrors$CountryCode == \"us\"] response_time <- async(function(url) {   http_head(url)$     then(http_stop_for_status)$     then(function(x) setNames(x[[\"times\"]][[\"total\"]], url))$     catch(error = function(e) setNames(Inf, url)) }) synchronise(response_time(mirror_urls[[1]])) ## https://cloud.r-project.org/  ##                     0.160045 synchronise(response_time(\"https://httpbin.org/status/404\")) ## https://httpbin.org/status/404  ##                            Inf fastest_urls <- async(function(urls) {   reqs <- lapply(urls, response_time)   when_some(10, .list = reqs)$     then(function(x) sort(unlist(x))) }) synchronise(fastest_urls(mirror_urls)) ##             https://cloud.r-project.org/  ##                                 0.059449  ##           https://mirrors.cicku.me/cran/  ##                                 0.206322  ##         https://ftp.osuosl.org/pub/cran/  ##                                 0.222940  ##         https://cran.mirrors.hoobly.com/  ##                                 0.354841  ##         https://lib.stat.cmu.edu/R/CRAN/  ##                                 0.407614  ##     https://archive.linux.duke.edu/cran/  ##                                 0.410945  ## https://repo.miserver.it.umich.edu/cran/  ##                                 0.450053  ##     https://mirror.las.iastate.edu/CRAN/  ##                                 0.458398  ##       https://mirrors.nics.utk.edu/cran/  ##                                 0.502265  ##                   https://cran.case.edu/  ##                                 0.633203"},{"path":"https://dereckmezquita.github.io/fork-async/articles/async-example.html","id":"resolve-packages-from-github-and-urls","dir":"Articles","previous_headings":"","what":"Resolve packages from GitHub and URLs","title":"Examples for the async package","text":"resolving mean 1. getting DESCRIPTION file package able look dependencies, metadata, 2. getting download link, case want download package later. example ’ll implement two package types: 1. package GitHub, 2. package file URL. start GitHub packages, complicated. First, need set Accept HTTP header talk GitHub API, define helper function . also set GitHub token avoid GitHub rate limits, GITHUB_PAT environment variable. Getting DESCRIPTION file easy, just need hit right API endpoint, extract response. desc::desc() creates nice desc::description object can queried. use http_stop_for_status() error , error happens, e.g. repo file exist, access , etc. don’t catch () error , get_gh_description() throw error $() ($when_any() $when_all()) child, synchronise(). Test: Test non-existing repos, errors: next thing need SHA commit want download. simplicity always use last commit default branch . function similar previous one otherwise. Test: small helper function get GitHub download URL user name, repo name sha hash: ready write GitHub resolver now. take slug, .e. user/repo form, query DESCRIPTION file SHA hash. when_all() resolves done, results named list pieces data. just create download URL, simply return already parsed DESCRIPTION. Test: Resolving package HTTP URL much simpler, needs single HTTP request, simply need download package get DESCRIPTION file. place downloaded package temporary file (file name), return file:// URL file. Test: Now combine two functions: Errors bubble top level, downloads cancelled automatically (unless already completed course), error thrown synchronise(). can also handle errors locally, point wish. E.g. can simply return NULL values failed packages.","code":"default_gh_headers <- function() {   headers <- c(\"Accept\" = \"application/vnd.github.v3+json\")   pat <- Sys.getenv(\"GITHUB_PAT\", \"\")   if (pat != \"\") {     headers <- c(headers, Authorization = paste(\"token\", pat))   }   headers } get_gh_description <- async(function(user, repo)  {   desc_url <- paste0(     \"https://raw.githubusercontent.com/\", user, \"/\", repo,     \"/HEAD/DESCRIPTION\")   http_get(desc_url, headers = default_gh_headers())$     then(http_stop_for_status)$     then(function(resp) rawToChar(resp$content))$     then(function(txt) desc::desc(text = txt)) }) synchronise(get_gh_description(\"jeroen\", \"curl\")) ## Type: Package ## Package: curl ## Title: A Modern and Flexible Web Client for R ## Version: 5.2.1.9000 ## Authors@R (parsed): ##     * Jeroen Ooms <jeroen@berkeley.edu> [aut, cre] (<https://orcid.org/0000-0002-4035-0289>) ##     * Hadley Wickham <hadley@rstudio.com> [ctb] ##     * RStudio [cph] ## Description: The curl() and curl_download() functions provide ##     highly configurable drop-in replacements for base url() and ##     download.file() with better performance, support for encryption ##     (https, ftps), gzip compression, authentication, and other 'libcurl' ##     goodies. The core of the package implements a framework for performing ##     fully customized requests where data can be processed either in ##     memory, on disk, or streaming via the callback or connection ##     interfaces. Some knowledge of 'libcurl' is recommended; for a ##     more-user-friendly web client see the 'httr' package which builds on ##     this package with http specific tools and logic. ## License: MIT + file LICENSE ## URL: https://jeroen.r-universe.dev/curl ##     https://curl.se/libcurl/ ## BugReports: https://github.com/jeroen/curl/issues ## Depends: ##     R (>= 3.0.0) ## Suggests: ##     httpuv (>= 1.4.4), ##     jsonlite, ##     knitr, ##     later, ##     rmarkdown, ##     spelling, ##     testthat (>= 1.0.0), ##     webutils ## VignetteBuilder: ##     knitr ## Encoding: UTF-8 ## Language: en-US ## Roxygen: list(markdown = TRUE) ## RoxygenNote: 7.3.0 ## SystemRequirements: libcurl: libcurl-devel (rpm) or ##     libcurl4-openssl-dev (deb). synchronise(get_gh_description(\"jeroen\", \"curlqwerty\")) ## Error in stop(http_error(resp)): Not Found (HTTP 404). synchronise(get_gh_description(\"git\", \"git\")) ## Error in stop(http_error(resp)): Not Found (HTTP 404). get_gh_sha <- async(function(user, repo) {   commit_url <- paste0(     \"https://api.github.com/repos/\", user, \"/\", repo, \"/git/trees/HEAD\")   http_get(commit_url, headers = default_gh_headers())$     then(http_stop_for_status)$     then(function(resp) {       cdata <- jsonlite::fromJSON(rawToChar(resp$content),                                   simplifyVector = FALSE)       cdata$sha     }) }) synchronise(get_gh_sha(\"jeroen\", \"curl\")) ## [1] \"039a5a29c921a137e63a7671d650dd0a387f4216\" get_gh_download_url <- function(user, repo, sha) {   paste0(\"https://api.github.com/repos/\", user, \"/\", repo,          \"/zipball/\", sha) } resolve_gh <- async(function(slug) {   slug <- strsplit(slug, \"/\")[[1]]   user <- slug[[1]]   repo <- slug[[2]]   desc <- get_gh_description(user, repo)   sha  <- get_gh_sha(user, repo)   when_all(desc = desc, sha = sha)$     then(function(x) {       list(         url = get_gh_download_url(user, repo, x$sha),         description = x$desc)     }) }) synchronise(resolve_gh(\"jeroen/curl\")) ## $url ## [1] \"https://api.github.com/repos/jeroen/curl/zipball/039a5a29c921a137e63a7671d650dd0a387f4216\" ##  ## $description ## Type: Package ## Package: curl ## Title: A Modern and Flexible Web Client for R ## Version: 5.2.1.9000 ## Authors@R (parsed): ##     * Jeroen Ooms <jeroen@berkeley.edu> [aut, cre] (<https://orcid.org/0000-0002-4035-0289>) ##     * Hadley Wickham <hadley@rstudio.com> [ctb] ##     * RStudio [cph] ## Description: The curl() and curl_download() functions provide ##     highly configurable drop-in replacements for base url() and ##     download.file() with better performance, support for encryption ##     (https, ftps), gzip compression, authentication, and other 'libcurl' ##     goodies. The core of the package implements a framework for performing ##     fully customized requests where data can be processed either in ##     memory, on disk, or streaming via the callback or connection ##     interfaces. Some knowledge of 'libcurl' is recommended; for a ##     more-user-friendly web client see the 'httr' package which builds on ##     this package with http specific tools and logic. ## License: MIT + file LICENSE ## URL: https://jeroen.r-universe.dev/curl ##     https://curl.se/libcurl/ ## BugReports: https://github.com/jeroen/curl/issues ## Depends: ##     R (>= 3.0.0) ## Suggests: ##     httpuv (>= 1.4.4), ##     jsonlite, ##     knitr, ##     later, ##     rmarkdown, ##     spelling, ##     testthat (>= 1.0.0), ##     webutils ## VignetteBuilder: ##     knitr ## Encoding: UTF-8 ## Language: en-US ## Roxygen: list(markdown = TRUE) ## RoxygenNote: 7.3.0 ## SystemRequirements: libcurl: libcurl-devel (rpm) or ##     libcurl4-openssl-dev (deb). resolve_url <- async(function(url) {   dir.create(tmpdir <- tempfile())   dest <- file.path(tmpdir,  basename(url))   http_get(url, file = dest)$     then(http_stop_for_status)$     then(function() {       dest <- normalizePath(dest)       list(         url = paste(\"file://\", normalizePath(dest)),         description = desc::desc(dest))     }) }) curl20_url <- \"https://cloud.r-project.org/src/contrib/Archive/curl/curl_2.0.tar.gz\" synchronise(resolve_url(curl20_url)) ## $url ## [1] \"file:// /tmp/Rtmp8Slel9/file1ada51d17b6/curl_2.0.tar.gz\" ##  ## $description ## Type: Package ## Package: curl ## Title: A Modern and Flexible Web Client for R ## Version: 2.0 ## Authors@R (parsed): ##     * Jeroen Ooms <jeroen.ooms@stat.ucla.edu> [cre, aut] ##     * Hadley Wickham <hadley@rstudio.com> [ctb] ##     * RStudio [cph] ## Author: Jeroen Ooms [cre, aut], Hadley Wickham [ctb], RStudio ##     [cph] ## Maintainer: Jeroen Ooms <jeroen.ooms@stat.ucla.edu> ## Description: The curl() and curl_download() functions provide ##     highly configurable drop-in replacements for base url() and ##     download.file() with better performance, support for encryption ##     (https, ftps), gzip compression, authentication, and other libcurl ##     goodies. The core of the package implements a framework for performing ##     fully customized requests where data can be processed either in ##     memory, on disk, or streaming via the callback or connection ##     interfaces. Some knowledge of libcurl is recommended; for a ##     more-user-friendly web client see the 'httr' package which builds on ##     this package with http specific tools and logic. ## License: MIT + file LICENSE ## URL: https://github.com/jeroenooms/curl#readme ## BugReports: https://github.com/jeroenooms/curl/issues ## Depends: ##     R (>= 3.0.0) ## Suggests: ##     jsonlite, ##     knitr, ##     magrittr, ##     rmarkdown, ##     testthat (>= 1.0.0) ## VignetteBuilder: ##     knitr ## Date/Publication: 2016-09-17 00:42:17 ## LazyData: true ## NeedsCompilation: yes ## Packaged: 2016-09-16 15:48:22 UTC; jeroen ## Repository: CRAN ## RoxygenNote: 5.0.1 ## SystemRequirements: libcurl: libcurl-devel (rpm) or ##     libcurl4-openssl-dev (deb). res <- synchronise(when_all(   resolve_gh(\"jeroen/curl\"),   resolve_gh(\"ropensci/magick\"),   resolve_url(curl20_url) )) length(res) ## [1] 3 tryCatch(   res <- synchronise(when_all(     resolve_gh(\"jeroen/curl\"),     resolve_gh(\"ropensci/magick\"),     resolve_url(curl20_url),     resolve_url(\"https://httpbin.org/delay/2\")   )),   error = function(e) e ) ## <async error: Line starting '{ ...' is malformed! ##  in *parent* callback of `http_get(url, file = dest)$then(http_stop_for_status)$then` at ./<text>:4:3> res <- synchronise(when_all(   resolve_gh(\"jeroen/curl\"),   resolve_gh(\"ropensci/magickfoooooobar\")$catch(error = function(e) NULL),   resolve_url(curl20_url),   resolve_url(\"https://httpbin.org/status/401\")$catch(error = function(e) NULL) )) res[[1]]$description$get(\"Package\") ## Package  ##  \"curl\" res[[2]] ## NULL res[[3]]$description$get(\"Version\") ## Version  ##   \"2.0\" res[[4]] ## NULL"},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Internals of the async package","text":"vignette needed using async package. may useful developers async methods, certainly people working async package . Make sure read README also manual page ?deferred reading vignette. think document conflicts source code, please report issue async issue tracker.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"the-event-loop","dir":"Articles","previous_headings":"","what":"The event loop","title":"Internals of the async package","text":"async event loop modeled libuv event loop. possible ’ll switch libuv event loop later.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"polling","dir":"Articles","previous_headings":"The event loop","what":"Polling","title":"Internals of the async package","text":"essential feature event loop polling /O, single processx::poll() call. allows quickest possible processing /O, poll() returns soon event available processing. Ideally, single poll() call return available events, indeed case Unix, currently Windows. improve Windows, need use GetQueuedCompletionStatusEx() processx, can remove multiple packets IOCP. HTTP already handled properly Windows well, use select(), returns events.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"pollables","dir":"Articles","previous_headings":"The event loop","what":"Pollables","title":"Internals of the async package","text":"processx::poll() able poll various types /O: * processx processes (used async currently), * processx connections, used async poll processes, .e. run_process(), run_r_process() call_function(). * curl file descriptors, used async poll HTTP.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"interrupts","dir":"Articles","previous_headings":"The event loop","what":"Interrupts","title":"Internals of the async package","text":"processx::poll() interruptible platforms. implemented polling loop, short amount time (~200ms) checking interrupts.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"processes","dir":"Articles","previous_headings":"The event loop > Interrupts","what":"Processes","title":"Internals of the async package","text":"Processes polled using “poll connections”. extra connection addition standard output error, run_process() run_r_process() used poll termination process. worker pool, .e. call_function(), used communicate back main process, can used poll completion remote function call. Unix, polling processx connections simply uses file descriptor poll(2) system call. Windows, polling processx connections uses overlapped /O IOCPs. Since Windows poll without reading, connections also buffered.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"http","dir":"Articles","previous_headings":"The event loop > Interrupts","what":"HTTP","title":"Internals of the async package","text":"Implementing HTTP polling significantly difficult polling processx connections. list significant issues workarounds .","code":""},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"the-curl-package","dir":"Articles","previous_headings":"The event loop > Interrupts > HTTP","what":"The curl package","title":"Internals of the async package","text":"curl package implements HTTP client, uses libcurl internally. async, intend re-implement HTTP client, just want use curl. added curl::multi_fdset() function curl, returns socket file descriptiors poll curl’s HTTP connections also timeout value curl prefers. poll file descriptors processx::poll() data, call curl::multi_run(). also use returned timeout value maximum limit poll, unless also lower limits /O timers.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"the-dns-resolver","dir":"Articles","previous_headings":"The event loop > Interrupts > HTTP","what":"The DNS resolver","title":"Internals of the async package","text":"HTTP queries usually involve DNS resolution. done automatically libcurl, need handle somewhat specially, libcurl report file descriptor . E.g. curl multi handle single pending HTTP query DNS resolution phase, curl::multi_fdset() returns zero file descriptors. still need call curl::multi_run() allow DNS resolution complete, actually HTTP start. work around , always call curl::multi_run() curl handles DNS resolution phase used curl’s returned timeout value poll.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"http-timeouts","dir":"Articles","previous_headings":"The event loop > Interrupts > HTTP","what":"HTTP timeouts","title":"Internals of the async package","text":"HTTP timeouts also handled specially, need call curl::multi_run() even data curl sockets. Similarly DNS resolution workaround, always call curl::multi_run() used curl’s timeout poll. makes sure called later requrested curl , curl can take care HTTP timeouts.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"polling-on-windows","dir":"Articles","previous_headings":"The event loop > Interrupts > HTTP","what":"Polling on Windows","title":"Internals of the async package","text":"Polling mix processx connections (IOCP) curl sockets trivial Windows. add sockets processx’s IOCP, cause complications libcurl also started use IOCP , also buffering. right approach use select() sockets, parallel IOCP poll. two threads. main thread runs select() background thread polls IOCP. data either threads, must wake thread. add extra socket localhost FD set curl sockets. “notification socket”, IOCP polling thread writes data socket soon poll finished. Similarly, main thread puts special event IOCP, soon select() finished. avoid race conditions, neither thread can assume woke , even sent wake event. need keep mind writing Windows poll code processx. particular * select() thread may may return “real” results, independently whether notification socket set. * IOCP thread may may return real result. “non-real” result can recognized special key, zero OVERLAPPED pointer.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"fd_set-on-windows","dir":"Articles","previous_headings":"","what":"Internals of the async package","title":"Internals of the async package","text":"FD_SETSIZE 64 default Windows, much less need, set 32767. wonder libcurl anything .","code":""},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"nested-event-loops","dir":"Articles","previous_headings":"The event loop","what":"Nested event loops","title":"Internals of the async package","text":"Nested event loops general fine, “just work”, polling /O active event loop . complications worker pool, however. particular, worker pool tasks might terminate event loop inactive. See section worker pool . Another potential issue nested event loops HTTP requests might time HTTP connections might disconnect event loops inactive. much can , without running HTTP background thread example, difficult well call R functions background thread, need use (lib)curl’s C multi handles directly, less ideal.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/articles/internals.html","id":"the-worker-pool","dir":"Articles","previous_headings":"","what":"The worker pool","title":"Internals of the async package","text":"worker pool set background processes, controlled via callr::r_session objects. call_function() queues function call run worker pool, async event loop schedules tasks queue. workers can polled via poll connections. single worker pool R process. multiple event loops active, share worker pool. reason costly start worker pool creating event loop (.e. synchronise() call). general seems life time worker pool typically longer life time event loop. Sharing worker pool causes complications, need handle event loop. partucular, worker pool task might finish event loop active. case, free worker, remove task’s results worker pool. event loop active , check tasks completed event loop inactive. Moreover, choosing new task run worker pool, may choose task belong active event loop. fine, restriction task must removed worker pool event loop active.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gábor Csárdi. Maintainer.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Csárdi G (2024). async: Asynchronous Computation '/O'. R package version 0.0.0.9004, https://github.com/gaborcsardi/async#readme.","code":"@Manual{,   title = {async: Asynchronous Computation and 'I/O'},   author = {Gábor Csárdi},   year = {2024},   note = {R package version 0.0.0.9004},   url = {https://github.com/gaborcsardi/async#readme}, }"},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"async","dir":"","previous_headings":"","what":"Asynchronous Computation and I/O","title":"Asynchronous Computation and I/O","text":"Asynchronous HTTP async package brings asynchronous (async) computation /O R. uses event loop schedule asynchronous functions report results via deferred values. Deferred values can chained together complex async computation, evaluated lazily, synchronisation points.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Asynchronous Computation and I/O","text":"deferred class basic building block async computation. Timers, HTTP queries, generic external processes, external R processes. worker pool calling R functions background. Operations combine deferred values: $(), $when_all(), when_any(), when_some(), $finally() $catch() operation handle errors. strong ownership model: deferred value exactly one child receives result (error) async computation. Synchronisation (sync) points embed async code synchronous code. Sync points run event loop, can stacked. Lazy evaluation deferred values. deferred values needed calculate result async phase evaluated. Auto-cancellation. Deferred values needed final result(s) async phase automatically cancelled, soon possible. Manual cancellation also possible. Progress bar support. Deferred values can report progress via callback function. Additional helper functions working deferred values, e.g. async_map(), async_detect(), async_filter(), etc.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"supported-async-io-and-computation","dir":"","previous_headings":"","what":"Supported async I/O and computation","title":"Asynchronous Computation and I/O","text":"support following async primitives: - Timers: delay(). - HTTP queries: http_get(), http_head(). - External processes: run_process(). - External R processes: run_r_process(). - workers pool processes evaluate R code: call_function().","code":""},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Asynchronous Computation and I/O","text":"async package brings asychronous /O computation R. implements asynchronous HTTP requests, timers, subprocesses R worker pool.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"deferred-values","dir":"","previous_headings":"","what":"Deferred Values","title":"Asynchronous Computation and I/O","text":"Asynchronous computation represented deferred values. async deferred value R6 object, reference semantics. programming languages deferred values called futures promises. can think deferred value placeholder (non-deferred) value yet known. actual value deferred computed, say deferred resolved. Typically deferred value created requesting asynchronous /O, like HTTP GET request http_get() function.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"built-in-deferred-value-constructors","dir":"","previous_headings":"","what":"Built-in Deferred Value Constructors","title":"Asynchronous Computation and I/O","text":"async package built-async functions create deferred values: - delay() creates timer expires specified time. - http_get() http_head() perform HTTP requests, asynchronously. - async_constant() creates simple deferred represents supplied value. - run_process() runs external process using processx returns exit code, standard output error, asynchronously. - run_r_process() runs external R process, calls specified R function process. returns exit status, standard output, standard error, return value R function call, asynchronously. - call_function() uses worker pool persistent external R processes call R functions. returns return value function, standard output error process, asynchronously.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"deferred-chains","dir":"","previous_headings":"","what":"Deferred chains","title":"Asynchronous Computation and I/O","text":"actual value deferred queried directly, can still operate , declaring code executed, value known: http_status() async function returns status code GET HTTP request specified URL. works creating async GET request specifying HTTP response , status code accepted . deferred value returned http_status() resolves status code URL. () returns another deferred, also () method, chainable. $() simplest combination operator deferred values. $when_all() similar, creates deferred value resolves deferred values passed $when_all() computed. $when_any() creates deferred value resolves soon one arguments successfully resolves. when_some() generalization requires computation given number deferred values.","code":"library(async) http_status <- function(url) {   def <- http_get(url)$     then(function(response) response$status_code) } synchronise(http_status(\"https://httpbin.org\")) #> [1] 200"},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"synchronization-barriers","dir":"","previous_headings":"","what":"Synchronization barriers","title":"Asynchronous Computation and I/O","text":"async allows embedding asynchronous computation synchronous code. execution program sync phase async phases. program starts, sync phase. sync phase create deferred values. (can still define (async) functions, create deferred values called.) enter async phase, call synchronise() expression evaluates deferred value. async phase last deferred value computed error thrown (error reaches synchronise()). synchronise() creates event loop, manages computation deferred values particular async phase. Async phases can embedded . .e. program may call synchronise() async phase. outer async phase’s event loop stops inner async phase terminates. Deferred values passed synchronise() barrier, anoter (sync async phase). happen, error reported first operation leaked deferred value. typical application, function implemented asynchronously, used synchronously interactive user, another piece synchronous code, via synchronise() calls. following example makes three HTTP requests parallel:","code":"http_status3 <- function() {   http_status <- function(url) {     http_get(url)$then(function(response) response$status_code)   }   r1 <- http_status(\"https://httpbin.org/status/403\")   r2 <- http_status(\"https://httpbin.org/status/404\")   r3 <- http_status(\"https://httpbin.org/status/200\")   when_all(r1, r2, r3) } synchronise(http_status3()) #> [[1]] #> [1] 403 #>  #> [[2]] #> [1] 404 #>  #> [[3]] #> [1] 200"},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"error-handling","dir":"","previous_headings":"","what":"Error handling","title":"Asynchronous Computation and I/O","text":"two ways handle errors asynchronous code. One $catch() operation can called deferred value. $catch() similar syntax tryCatch(). can used catch errors computation deferred value, including computation ancestors (except errors ancestors already handle). Errors can also handled synchronously. error handled asynchronously, deferred value throw error one descendants synchronise()-ed. can caught tryCatch().","code":"response_time <- async(function(url) {   http_head(url)$     then(http_stop_for_status)$     then(function(x) setNames(x[[\"times\"]][[\"total\"]], url))$     catch(error = function(...) setNames(Inf, url)) }) synchronise(response_time(\"https://google.com\")) #> https://google.com  #>           0.213394 synchronise(response_time(\"https://httpbin.org/status/401\")) #> https://httpbin.org/status/401  #>                            Inf"},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"ownership-and-the-async-dag","dir":"","previous_headings":"","what":"Ownership and the Async DAG","title":"Asynchronous Computation and I/O","text":"$() method deferred value called create another deferred value: say d2 owns d1. also say d2 child d1, d1 parent d2. async strong ownership model, allows single owner (.e. single child) deferred. parent-child relationships define directed forest graph, collection directed trees. (without shared deferred values, see manual.) strong ownership model allow calling $() multiple times deferred value, .e. following generates error: when_all(), when_any() when_some() operations set single deferred owner multiple parents. when_all() child node resolved parents resolved (one throws error). when_any() resolves soon one parents resolves. parents throw errors when_any() throws well. when_some() generalization when_any() resolves soon specified number parents resolve without error, many parents fail when_some() successful. synchronise() called deferred value, DAG rooted called async DAG async phase. (usually directed tree, README deal shared deferred values, result general DAGs.) strict shared ownership model restrictive, certain deferred values can marked shared, via $share() method. can multiple owners (children) also auto-cancelled (see Auto-Cancellation later).","code":"d2 <- d1$then(function(x) ...) do <- function() {   d <- delay(1/100)   d$then(function() print(\"foo\"))   d$then(function() print(\"bar\")) } synchronise(do()) #> Error in def__add_as_parent(self, private, child): Deferred value is already owned"},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"lazy-evaluation","dir":"","previous_headings":"","what":"Lazy Evaluation","title":"Asynchronous Computation and I/O","text":"async evaluate deferred values part async DAG async phase. clearly needed compute result async phase, waste resources working . (also unclear errors handled.) following example, d1 d2 created, part async DAG, never evaluated.","code":"do <- function() {   d1 <- delay(1/100)$then(function() print(\"d1\"))   d2 <- d1$then(function() print(\"d2\"))   d3 <- delay(1/100)$then(function() print(\"d3\"))   d4 <- d3$then(function() print(\"d4\"))   d4 } invisible(synchronise(do())) #> [1] \"d3\" #> [1] \"d4\""},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"auto-cancellation","dir":"","previous_headings":"","what":"Auto-Cancellation","title":"Asynchronous Computation and I/O","text":"async phase, might happen parts async DAG needed final result . E.g. parent when_all() node throws error, parents don’t computed. case event loop phase automatically cancels deferred values. Similarly, single parent when_any() node resolved, parents can cancelled. general, node async DAG resolved, whole directed DAG, rooted node, can cancelled (except nodes already resolved nodes already failed). Auto-cancellation convenient, can sure resources free soon needed. practical examples: Making HTTP requests many mirror web sites, check response time. soon first reply , rest HTTP requests cancelled. multi-process computation, soon one process fails, rest automatically cancelled. (Unless failure handled, course.) async also another type cancellation, synchronise() interrupted externally, either user system error. case processes resources created event loop, cancelled freed. Shared deferred values (see $share()) auto-cancelled children resolved errored, always cancelled end async phase.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"async-iterators","dir":"","previous_headings":"","what":"Async Iterators","title":"Asynchronous Computation and I/O","text":"async provides utilities make easier deal collections deferred values. E.g. async_map() applies async function list returns single deferred value whole result. async_detect() finds value list satisfies async predicate function, etc. current iterators: * async_map() applies async function elements vector list (collection). * async_detect() finds element collection passed async truth test. * async_every() checks every element collection satisfies async predicate. async_some() checks element . * async_filter() keeps elements pass async truth test.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"async-control-flow","dir":"","previous_headings":"","what":"Async Control Flow","title":"Asynchronous Computation and I/O","text":"Control flow deferred values can challenging. helpers: * async_reflect() creates async function always succeeds. useful want apply collection, don’t want stop first error. * async_retry() tries async function number times. async_retryable() turns regular function retryable one. * async_sequence() chains two async functions. Calling sequence equivalent calling () , async_sequence() easier use programmatically. * async_until() async_whilst() let call async function repeatedly, (syncronous) condition holds. * async_timeout() runs async function timeout.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"other-async-utilities","dir":"","previous_headings":"","what":"Other Async Utilities","title":"Asynchronous Computation and I/O","text":"async_constant() takes value creates asynchronous function returns value.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"parallel-api-queries","dir":"","previous_headings":"Examples","what":"Parallel API Queries","title":"Asynchronous Computation and I/O","text":"Query crandb API, get authors packages reverse dependencies.","code":"fromJSON <- function(x) jsonlite::fromJSON(x, simplifyVector = FALSE) revdep_authors <- function() {   get_author <- function(package) {     url <- paste0(\"https://crandb.r-pkg.org/\", package)     http_get(url)$       then(function(x) fromJSON(rawToChar(x$content)))$       then(function(x) x$Author)   }    http_get(\"https://crandb.r-pkg.org/-/topdeps/devel\")$     then(function(x) fromJSON(rawToChar(x$content)))$     then(function(x) names(unlist(x)))$     then(function(x) async_map(x, get_author)) } synchronise(revdep_authors())[1:3] #> [[1]] #> [1] \"Yihui Xie [aut, cre] (<https://orcid.org/0000-0003-0645-5666>),\\nAbhraneel Sarma [ctb],\\nAdam Vogt [ctb],\\nAlastair Andrew [ctb],\\nAlex Zvoleff [ctb],\\nAndre Simon [ctb] (the CSS files under inst/themes/ were derived from\\nthe Highlight package http://www.andre-simon.de),\\nAron Atkins [ctb],\\nAaron Wolen [ctb],\\nAshley Manton [ctb],\\nAtsushi Yasumoto [ctb] (<https://orcid.org/0000-0002-8335-495X>),\\nBen Baumer [ctb],\\nBrian Diggs [ctb],\\nBrian Zhang [ctb],\\nBulat Yapparov [ctb],\\nCassio Pereira [ctb],\\nChristophe Dervieux [ctb],\\nDavid Hall [ctb],\\nDavid Hugh-Jones [ctb],\\nDavid Robinson [ctb],\\nDoug Hemken [ctb],\\nDuncan Murdoch [ctb],\\nElio Campitelli [ctb],\\nEllis Hughes [ctb],\\nEmily Riederer [ctb],\\nFabian Hirschmann [ctb],\\nFitch Simeon [ctb],\\nForest Fang [ctb],\\nFrank E Harrell Jr [ctb] (the Sweavel package at inst/misc/Sweavel.sty),\\nGarrick Aden-Buie [ctb],\\nGregoire Detrez [ctb],\\nHadley Wickham [ctb],\\nHao Zhu [ctb],\\nHeewon Jeon [ctb],\\nHenrik Bengtsson [ctb],\\nHiroaki Yutani [ctb],\\nIan Lyttle [ctb],\\nHodges Daniel [ctb],\\nJake Burkhead [ctb],\\nJames Manton [ctb],\\nJared Lander [ctb],\\nJason Punyon [ctb],\\nJavier Luraschi [ctb],\\nJeff Arnold [ctb],\\nJenny Bryan [ctb],\\nJeremy Ashkenas [ctb, cph] (the CSS file at\\ninst/misc/docco-classic.css),\\nJeremy Stephens [ctb],\\nJim Hester [ctb],\\nJoe Cheng [ctb],\\nJohannes Ranke [ctb],\\nJohn Honaker [ctb],\\nJohn Muschelli [ctb],\\nJonathan Keane [ctb],\\nJJ Allaire [ctb],\\nJohan Toloe [ctb],\\nJonathan Sidi [ctb],\\nJoseph Larmarange [ctb],\\nJulien Barnier [ctb],\\nKaiyin Zhong [ctb],\\nKamil Slowikowski [ctb],\\nKarl Forner [ctb],\\nKevin K. Smith [ctb],\\nKirill Mueller [ctb],\\nKohske Takahashi [ctb],\\nLorenz Walthert [ctb],\\nLucas Gallindo [ctb],\\nMarius Hofert [ctb],\\nMartin Modrák [ctb],\\nMichael Chirico [ctb],\\nMichael Friendly [ctb],\\nMichal Bojanowski [ctb],\\nMichel Kuhlmann [ctb],\\nMiller Patrick [ctb],\\nNacho Caballero [ctb],\\nNick Salkowski [ctb],\\nNiels Richard Hansen [ctb],\\nNoam Ross [ctb],\\nObada Mahdi [ctb],\\nPavel N. Krivitsky [ctb] (<https://orcid.org/0000-0002-9101-3362>),\\nQiang Li [ctb],\\nRamnath Vaidyanathan [ctb],\\nRichard Cotton [ctb],\\nRobert Krzyzanowski [ctb],\\nRomain Francois [ctb],\\nRuaridh Williamson [ctb],\\nScott Kostyshak [ctb],\\nSebastian Meyer [ctb],\\nSietse Brouwer [ctb],\\nSimon de Bernard [ctb],\\nSylvain Rousseau [ctb],\\nTaiyun Wei [ctb],\\nThibaut Assus [ctb],\\nThibaut Lamadon [ctb],\\nThomas Leeper [ctb],\\nTim Mastny [ctb],\\nTom Torsney-Weir [ctb],\\nTrevor Davis [ctb],\\nViktoras Veitas [ctb],\\nWeicheng Zhu [ctb],\\nWush Wu [ctb],\\nZachary Foster [ctb],\\nZhian N. Kamvar [ctb] (<https://orcid.org/0000-0003-1458-7108>)\" #>  #> [[2]] #> [1] \"Hadley Wickham [aut, cre],\\nRStudio [cph, fnd],\\nR Core team [ctb] (Implementation of utils::recover())\" #>  #> [[3]] #> [1] \"JJ Allaire [aut],\\nYihui Xie [aut, cre] (<https://orcid.org/0000-0003-0645-5666>),\\nJonathan McPherson [aut],\\nJavier Luraschi [aut],\\nKevin Ushey [aut],\\nAron Atkins [aut],\\nHadley Wickham [aut],\\nJoe Cheng [aut],\\nWinston Chang [aut],\\nRichard Iannone [aut] (<https://orcid.org/0000-0003-3925-190X>),\\nAndrew Dunning [ctb] (<https://orcid.org/0000-0003-0464-5036>),\\nAtsushi Yasumoto [ctb, cph] (<https://orcid.org/0000-0002-8335-495X>,\\nNumber sections Lua filter),\\nBarret Schloerke [ctb],\\nCarson Sievert [ctb] (<https://orcid.org/0000-0002-4958-2844>),\\nChristophe Dervieux [ctb],\\nDevon Ryan [ctb] (<https://orcid.org/0000-0002-8549-0971>),\\nFrederik Aust [ctb] (<https://orcid.org/0000-0003-4900-788X>),\\nJeff Allen [ctb],\\nJooYoung Seo [ctb] (<https://orcid.org/0000-0002-4064-6012>),\\nMalcolm Barrett [ctb],\\nRob Hyndman [ctb],\\nRomain Lesur [ctb],\\nRoy Storey [ctb],\\nRuben Arslan [ctb],\\nSergio Oller [ctb],\\nRStudio, PBC [cph],\\njQuery UI contributors [ctb, cph] (jQuery UI library; authors listed in\\ninst/rmd/h/jqueryui-AUTHORS.txt),\\nMark Otto [ctb] (Bootstrap library),\\nJacob Thornton [ctb] (Bootstrap library),\\nBootstrap contributors [ctb] (Bootstrap library),\\nTwitter, Inc [cph] (Bootstrap library),\\nAlexander Farkas [ctb, cph] (html5shiv library),\\nScott Jehl [ctb, cph] (Respond.js library),\\nIvan Sagalaev [ctb, cph] (highlight.js library),\\nGreg Franko [ctb, cph] (tocify library),\\nJohn MacFarlane [ctb, cph] (Pandoc templates),\\nGoogle, Inc. [ctb, cph] (ioslides library),\\nDave Raggett [ctb] (slidy library),\\nW3C [cph] (slidy library),\\nDave Gandy [ctb, cph] (Font-Awesome),\\nBen Sperry [ctb] (Ionicons),\\nDrifty [cph] (Ionicons),\\nAidan Lister [ctb, cph] (jQuery StickyTabs),\\nBenct Philip Jonsson [ctb, cph] (pagebreak Lua filter),\\nAlbert Krewinkel [ctb, cph] (pagebreak Lua filter)\""},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"checking-urls","dir":"","previous_headings":"Examples","what":"Checking URLs","title":"Asynchronous Computation and I/O","text":"following code returns 2 URLs respond shortest response time. See package vignettes examples.","code":"response_time <- async(function(url) {   http_head(url)$     then(http_stop_for_status)$     then(function(x) setNames(x[[\"times\"]][[\"total\"]], url))$     catch(error = function() setNames(Inf, url)) })  fastest_urls <- async(function(urls, n = 2) {   reqs <- lapply(urls, response_time)   when_some(n, .list = reqs)$     then(function(x) sort(unlist(x))) })  urls <- c(\"https://cran.rstudio.com\", \"https://cran.r-project.org\",           \"https://www.stats.bris.ac.uk/R/\", \"https://cran.uib.no/\")  synchronise(fastest_urls(urls)) #>   https://cran.rstudio.com https://cran.r-project.org  #>                   0.057224                   0.174976"},{"path":"https://dereckmezquita.github.io/fork-async/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Asynchronous Computation and I/O","text":"MIT © RStudio Inc","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an async function — async","title":"Create an async function — async","text":"Create async function, returns deferred value, regular function. fun already async function, nothing, just returns .","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an async function — async","text":"","code":"async(fun)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an async function — async","text":"fun Original function.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an async function — async","text":"Async version original function.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an async function — async","text":"result function arguments, default values, environment original input function.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an async function — async","text":"","code":"f <- function(x) 42 af <- async(f) is_async(f) #> [1] FALSE is_async(af) #> [1] TRUE f() #> [1] 42 synchronise(dx <- af()) #> [1] 42 dx #> <deferred> #>   Public: #>     cancel: function (reason = \"Cancelled\")  #>     catch: function (...)  #>     clone: function (deep = FALSE)  #>     event_emitter: NULL #>     finally: function (on_finally)  #>     initialize: function (action = NULL, on_progress = NULL, on_cancel = NULL,  #>     share: function ()  #>     then: function (on_fulfilled)  #>   Private: #>     action: NULL #>     add_as_parent: function (child)  #>     cancel_callback: NULL #>     cancelled: FALSE #>     children: list #>     dead_end: FALSE #>     event_loop: event_loop, R6 #>     get_info: function ()  #>     id: 2 #>     make_error_object: function (err)  #>     maybe_cancel_parents: function (reason)  #>     mycall: call #>     null: function ()  #>     parent_reject: function (value, resolve)  #>     parent_resolve: function (value, resolve)  #>     parents: NULL #>     progress: function (data)  #>     progress_callback: NULL #>     reject: function (reason)  #>     resolve: function (value)  #>     run_action: function ()  #>     running: TRUE #>     shared: FALSE #>     state: fulfilled #>     type: async #>     update_parent: function (old, new)  #>     value: 42"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_backoff.html","id":null,"dir":"Reference","previous_headings":"","what":"Retry an asynchronous function with exponential backoff — async_backoff","title":"Retry an asynchronous function with exponential backoff — async_backoff","text":"Keeps trying function's deferred value resolves without error, times tries performed, time_limit seconds passed since start first try.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_backoff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retry an asynchronous function with exponential backoff — async_backoff","text":"","code":"async_backoff(   task,   ...,   .args = list(),   times = Inf,   time_limit = Inf,   custom_backoff = NULL,   on_progress = NULL,   progress_data = NULL )"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_backoff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retry an asynchronous function with exponential backoff — async_backoff","text":"task asynchronous function. ... Arguments pass task. .args arguments pass task. times Maximum number tries. time_limit Maximum number seconds try. custom_backoff NULL callback function calculate waiting time, ithe try. passed argument. NULL, default used, uniform random number seconds 1 2^. on_progress Callback function progress bar. Retries announced , NULL. on_progress called two arguments. first named list entries: event: string either \"retry\" \"givenup\", tries: number tried far, spent: number seconds spent trying far, error: error object last failure, retry_in: number seconds next try. second argument progress_data. progress_data async_backoff() pass object on_progress second argument.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_backoff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retry an asynchronous function with exponential backoff — async_backoff","text":"Deferred value operation retries.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_backoff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retry an asynchronous function with exponential backoff — async_backoff","text":"Note unnamed arguments passed task.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_backoff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retry an asynchronous function with exponential backoff — async_backoff","text":"","code":"# \\donttest{ afun <- function() {   wait_100_ms <- function(i) 0.1   async_backoff(     function() if (runif(1) < 0.8) stop(\"nope\") else \"yes!\",     times = 5,     custom_backoff = wait_100_ms   ) }  # There is a slight chance that it fails tryCatch(synchronise(afun()), error = function(e) e) #> [1] \"yes!\" # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a minimal deferred that resolves to the specified value — async_constant","title":"Make a minimal deferred that resolves to the specified value — async_constant","text":"sometimes useful start deferred chain.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a minimal deferred that resolves to the specified value — async_constant","text":"","code":"async_constant(value = NULL)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a minimal deferred that resolves to the specified value — async_constant","text":"value value resolve .","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a minimal deferred that resolves to the specified value — async_constant","text":"deferred value.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_constant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a minimal deferred that resolves to the specified value — async_constant","text":"Note evaluation value forced deferred value created.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a minimal deferred that resolves to the specified value — async_constant","text":"","code":"afun <- async(function() {   async_constant(1/100)$     then(function(x) delay(x))$     then(function(x) print(x)) }) synchronise(afun()) #> [1] TRUE #> [1] TRUE"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_debug.html","id":null,"dir":"Reference","previous_headings":"","what":"Async debugging utilities — async_debug","title":"Async debugging utilities — async_debug","text":"Helper function help non-trivial debugging async code.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_debug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Async debugging utilities — async_debug","text":"","code":"async_next(el = NULL)  async_step()  async_step_back()  async_list(def = NULL)  async_tree(def = NULL)  async_debug(id, action = TRUE, parent = TRUE)  async_wait_for(id)  async_where(   calls = sys.calls(),   parents = sys.parents(),   frm = get_async_frames() )  async_debug_shortcuts()  async_debug_remove_shortcuts()"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_debug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Async debugging utilities — async_debug","text":"el Event loop, defaults current event loop. def Deferred value used root DAG. Defaults deferred value corresponding result async phase. id Integer scalar, deferred debug wait . action Whether debug action callback. parent Whether debug parent callbacks. calls calls print, result sys.calls(). Defaults current call stack. parents parent frames call stack, result sys.parents(). Defaults current parents. frm async frame mark. Defaults recent async frame stack.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_debug.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Async debugging utilities — async_debug","text":"Async debugging can turned setting async_debug global option TRUE:   Setting value FALSE turn debugging. debugging , synchronise() call stop beginning event loop. deferred actions callbacks run point. synchronise() stops calling base::browser(). usual browser() commands (see manual) can used , plus extra commands help async debugging. extra commands: async_debug_shortcuts() adds handy shortcuts helper functions. E.g. async_next() can invoked .(without parens). need run per R session. Note adds shortcuts global environment. async_debug_remove_shortcuts() removes shortcuts global environment. .(async_next()) runs next iteration event loop. Note return something happens event loop: action parent callback executed, HTTP /O performed. Also note, single iteration event loop typically runs multiple action, parent callbacks. iteration done, control returned browser. .(async_step()) similar ., also starts debugging action parent callbacks. .e. another browser() called beginning callbacks next iteration event loop. .asb (async_step_back()) stops debugging callbacks. actually exdecutes anything event loop, go back main async browser, also need execute c (continue). .al (async_list()) lists deferred values current async phase. (ones already exist, may created future.) returns data frame columns: id: integer id deferred value. parents: Integer vector, parents deferred value. label: character label, used async_tree() nicely format information deferred value. call: call (language object) created deferred value. children: list children, integer vector. deferred value can one child, unless shared. type: type deferred value. arbitrary label, specified deferred value created. running: Whether deferred value already running. state: state deferred value, \"pending\", \"fulfilled\" \"rejected\". typically pending, since resolved deferred values removed async DAG (next event loop iteration.) cancelled: Whether deferred value cancelled. shared: Whether deferred value shared. filename: file name source code created deferred value. present code parsed source references enabled. position: start file position, line:column format, string. present code parsed source references enabled. .(async_tree()) prints DAG deferred values. async_debug() can used debug action /parent callbacks specified deferred value. async_wait_for() runs event loop specified deferred value resolved (.e. fulfilled rejected). .aw (async_where()) prints call stack marks frame corresponds action parent callback.","code":"options(async_debug = TRUE)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_detect.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the value of a match, asynchronously — async_detect","title":"Find the value of a match, asynchronously — async_detect","text":"predicates running parallel, returned match guaranteed first one.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_detect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the value of a match, asynchronously — async_detect","text":"","code":"async_detect(.x, .p, ..., .limit = Inf)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_detect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the value of a match, asynchronously — async_detect","text":".x list atomic vector. .p asynchronous predicate function. ... Additional arguments predicate function. .limit Number elements process simulateneously. 1, predicate applied sequentially.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_detect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the value of a match, asynchronously — async_detect","text":"deferred value result.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_detect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the value of a match, asynchronously — async_detect","text":"","code":"# \\donttest{ synchronise(async_detect(   c(\"https://eu.httpbin.org/status/404\", \"https://eu.httpbin.org\",     \"https://eu.httpbin.org/status/403\"),   async_sequence(http_head, function(x) x$status_code == 200) )) #> [1] \"https://eu.httpbin.org\" # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_every.html","id":null,"dir":"Reference","previous_headings":"","what":"Do every or some elements of a list satisfy an asynchronous predicate? — async_every","title":"Do every or some elements of a list satisfy an asynchronous predicate? — async_every","text":"every elements list satisfy asynchronous predicate?","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_every.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do every or some elements of a list satisfy an asynchronous predicate? — async_every","text":"","code":"async_every(.x, .p, ...)  async_some(.x, .p, ...)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_every.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do every or some elements of a list satisfy an asynchronous predicate? — async_every","text":".x list atomic vector. .p asynchronous predicate function. ... Additional arguments predicate function.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_every.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do every or some elements of a list satisfy an asynchronous predicate? — async_every","text":"deferred value result.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_every.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do every or some elements of a list satisfy an asynchronous predicate? — async_every","text":"","code":"# Check if all numbers are odd # Note the use of force() here. Otherwise x will be evaluated later, # and by then its value might change. is_odd <- async(function(x) {   force(x)   delay(1/1000)$then(function() as.logical(x %% 2)) }) synchronise(async_every(c(1,3,5,7,10,11), is_odd)) #> [1] FALSE synchronise(async_every(c(1,3,5,7,11), is_odd)) #> [1] TRUE"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep or drop elements using an asyncronous predicate function — async_filter","title":"Keep or drop elements using an asyncronous predicate function — async_filter","text":"async_filter keep elements .p true. (Tested via isTRUE(). async_reject opposite, drops .","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep or drop elements using an asyncronous predicate function — async_filter","text":"","code":"async_filter(.x, .p, ...)  async_reject(.x, .p, ...)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep or drop elements using an asyncronous predicate function — async_filter","text":".x list atomic vector. .p asynchronous predicate function. ... Additional arguments predicate function.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep or drop elements using an asyncronous predicate function — async_filter","text":"deferred value result.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep or drop elements using an asyncronous predicate function — async_filter","text":"","code":"# \\donttest{ ## Filter out non-working URLs afun <- async(function(urls) {   test_url <- async_sequence(      http_head, function(x) identical(x$status_code, 200L))   async_filter(urls, test_url) }) urls <- c(\"https://eu.httpbin.org/get\",           \"https://eu.httpbin.org/status/404\") synchronise(afun(urls)) #> [1] \"https://eu.httpbin.org/get\" # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply an asynchronous function to each element of a vector — async_map","title":"Apply an asynchronous function to each element of a vector — async_map","text":"Apply asynchronous function element vector","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply an asynchronous function to each element of a vector — async_map","text":"","code":"async_map(.x, .f, ..., .args = list(), .limit = Inf)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply an asynchronous function to each element of a vector — async_map","text":".x list atomic vector. .f Asynchronous function apply. ... Additional arguments .f. .args additional arguments .f. .limit Number elements process simulateneously.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply an asynchronous function to each element of a vector — async_map","text":"Deferred value resolved deferred values application .f resolved.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply an asynchronous function to each element of a vector — async_map","text":"","code":"synchronise(async_map(   seq(10, 100, by = 10) / 100,   function(wait) delay(wait)$then(function() \"OK\") )) #> [[1]] #> [1] \"OK\" #>  #> [[2]] #> [1] \"OK\" #>  #> [[3]] #> [1] \"OK\" #>  #> [[4]] #> [1] \"OK\" #>  #> [[5]] #> [1] \"OK\" #>  #> [[6]] #> [1] \"OK\" #>  #> [[7]] #> [1] \"OK\" #>  #> [[8]] #> [1] \"OK\" #>  #> [[9]] #> [1] \"OK\" #>  #> [[10]] #> [1] \"OK\" #>"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_race_some.html","id":null,"dir":"Reference","previous_headings":"","what":"A deferred value that resolves when the specified number of deferred values resolve, or is rejected when one of them is rejected — async_race_some","title":"A deferred value that resolves when the specified number of deferred values resolve, or is rejected when one of them is rejected — async_race_some","text":"functions similar when_some() when_any(), ignore errors. deferred rejected, async_race_some() async_race() rejected well.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_race_some.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A deferred value that resolves when the specified number of deferred values resolve, or is rejected when one of them is rejected — async_race_some","text":"","code":"async_race_some(count, ..., .list = list())  async_race(..., .list = list())"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_race_some.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A deferred value that resolves when the specified number of deferred values resolve, or is rejected when one of them is rejected — async_race_some","text":"count Number deferred values need resolve. ... Deferred values. .list deferred values.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_race_some.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A deferred value that resolves when the specified number of deferred values resolve, or is rejected when one of them is rejected — async_race_some","text":"deferred value, conditioned deferred values ... .list.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_race_some.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A deferred value that resolves when the specified number of deferred values resolve, or is rejected when one of them is rejected — async_race_some","text":"async_race() special case count = : resolves rejected soon one deferred resolves rejected. async auto-cancellation, required number deferred values resolved, deferred value rejected, rest cancelled.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_reflect.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an asynchronous function that always succeeds — async_reflect","title":"Make an asynchronous function that always succeeds — async_reflect","text":"sometimes useful, function applied entries vector list.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_reflect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an asynchronous function that always succeeds — async_reflect","text":"","code":"async_reflect(task)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_reflect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an asynchronous function that always succeeds — async_reflect","text":"task Function transform.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_reflect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an asynchronous function that always succeeds — async_reflect","text":"Async function returning deferred value never rejected. Instead value list entries error result. original deferred resolved, error NULL. original deferred rejected, result NULL.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_reflect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an asynchronous function that always succeeds — async_reflect","text":"","code":"badfun <- async(function() stop(\"oh no!\"))  safefun <- async_reflect(badfun)  synchronise(when_all(safefun(), \"good\")) #> [[1]] #> [[1]]$error #> <async error: oh no! #>  in *action* callback of `deferred$new` at ?/?:?:?> #> [[1]]$result #> NULL #>  #>  #> [[2]] #> [1] \"good\" #>"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_replicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Replicate an async function a number of times — async_replicate","title":"Replicate an async function a number of times — async_replicate","text":"Similar base::replicate(), differences: takes async function, instead expression, always returns list.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_replicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replicate an async function a number of times — async_replicate","text":"","code":"async_replicate(n, task, ..., .limit = Inf)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_replicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replicate an async function a number of times — async_replicate","text":"n Number replications. task Async function call. ... Additional arguments task. .limit Number concurrent async processes create.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_replicate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replicate an async function a number of times — async_replicate","text":"Resolves list results n task calls.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_replicate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replicate an async function a number of times — async_replicate","text":"","code":"# \\donttest{ ## perform an HTTP request three times, and list the reponse times do <- function() {   async_replicate(3,     function() http_get(\"https://eu.httpbin.org\")$then(function(x) x$times)) } synchronise(do()) #> [[1]] #>      redirect    namelookup       connect   pretransfer starttransfer  #>      0.000000      0.003902      0.059707      0.203727      0.262628  #>         total  #>      0.262749  #>  #> [[2]] #>      redirect    namelookup       connect   pretransfer starttransfer  #>      0.000000      0.003870      0.087911      0.237419      0.299189  #>         total  #>      0.299317  #>  #> [[3]] #>      redirect    namelookup       connect   pretransfer starttransfer  #>      0.000000      0.003850      0.115301      0.265492      0.328610  #>         total  #>      0.328790  #>  # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_retry.html","id":null,"dir":"Reference","previous_headings":"","what":"Retry an asynchronous function a number of times — async_retry","title":"Retry an asynchronous function a number of times — async_retry","text":"Keeps trying function's deferred value resolves without error, times tries performed.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_retry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retry an asynchronous function a number of times — async_retry","text":"","code":"async_retry(task, times, ...)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_retry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retry an asynchronous function a number of times — async_retry","text":"task asynchronous function. times Number tries. ... Arguments pass task.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_retry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retry an asynchronous function a number of times — async_retry","text":"Deferred value operation retries.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_retry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retry an asynchronous function a number of times — async_retry","text":"","code":"# \\donttest{ ## Try a download at most 5 times afun <- async(function() {   async_retry(     function() http_get(\"https://eu.httpbin.org\"),     times = 5   )$then(function(x) x$status_code) })  synchronise(afun()) #> [1] 200 # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_retryable.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an asynchronous funcion retryable — async_retryable","title":"Make an asynchronous funcion retryable — async_retryable","text":"Make asynchronous funcion retryable","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_retryable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an asynchronous funcion retryable — async_retryable","text":"","code":"async_retryable(task, times)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_retryable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an asynchronous funcion retryable — async_retryable","text":"task asynchronous function. times Number tries.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_retryable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an asynchronous funcion retryable — async_retryable","text":"Asynchronous retryable function.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_retryable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an asynchronous funcion retryable — async_retryable","text":"","code":"# \\donttest{ ## Create a downloader that retries five times http_get_5 <- async_retryable(http_get, times = 5) ret <- synchronise(   http_get_5(\"https://eu.httpbin.org/get?q=1\")$     then(function(x) rawToChar(x$content)) ) cat(ret) #> { #>   \"args\": { #>     \"q\": \"1\" #>   },  #>   \"headers\": { #>     \"Accept\": \"*/*\",  #>     \"Accept-Encoding\": \"deflate, gzip, br, zstd\",  #>     \"Host\": \"eu.httpbin.org\",  #>     \"User-Agent\": \"R/4.4.1 R (4.4.1 x86_64-pc-linux-gnu x86_64 linux-gnu) on GitHub Actions\",  #>     \"X-Amzn-Trace-Id\": \"Root=1-66b7b0e0-0adb09be4fda1e0224fef356\" #>   },  #>   \"origin\": \"20.171.122.33\",  #>   \"url\": \"https://eu.httpbin.org/get?q=1\" #> } # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Compose asynchronous functions — async_sequence","title":"Compose asynchronous functions — async_sequence","text":"equivalent using $() method deferred, easier use programmatically.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compose asynchronous functions — async_sequence","text":"","code":"async_sequence(..., .list = NULL)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compose asynchronous functions — async_sequence","text":"... Asynchronous functions compose. .list Mose asynchronous functions compose.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compose asynchronous functions — async_sequence","text":"Asynchronous function, composition input functions. performed left right, ones .list last ones.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compose asynchronous functions — async_sequence","text":"","code":"# \\donttest{ check_url <- async_sequence(   http_head, function(x) identical(x$status_code, 200L)) synchronise(check_url(\"https://eu.httpbin.org/status/404\")) #> [1] FALSE synchronise(check_url(\"https://eu.httpbin.org/status/200\")) #> [1] TRUE # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_timeout.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous function call with a timeout — async_timeout","title":"Asynchronous function call with a timeout — async_timeout","text":"deferred value resolved timeout expires, async_timeout() throws async_timeout error.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_timeout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous function call with a timeout — async_timeout","text":"","code":"async_timeout(task, timeout, ...)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_timeout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous function call with a timeout — async_timeout","text":"task Asynchronous function. timeout Timeout difftime object, number seconds. ... Additional arguments task.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_timeout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asynchronous function call with a timeout — async_timeout","text":"deferred value. async_timeout error thrown resolved within specified timeout.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_timeout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asynchronous function call with a timeout — async_timeout","text":"","code":"## You can catch the error, asynchronously synchronise(   async_timeout(function() delay(1/10)$then(function() \"OK\"), 1/1000)$     catch(async_timeout = function(e) \"Timed out\",           error = function(e) \"Other error\") ) #> [1] \"Timed out\"  ## Or synchronously tryCatch(   synchronise(     async_timeout(function() delay(1/10)$then(function() \"OK\"), 1/1000)   ),   async_timeout = function(e) \"Timed out. :(\",   error = function(e) paste(\"Other error:\", e$message) ) #> [1] \"Timed out. :(\""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_timer.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated timer — async_timer","title":"Repeated timer — async_timer","text":"supplied callback function called event loop every delay seconds.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_timer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated timer — async_timer","text":"","code":"t <- async_timer$new(delay, callback) t$cancel()"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_timer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated timer — async_timer","text":"delay: Time interval seconds, amount time delay delay execution. can fraction second. callback: Callback function without arguments. called event loop every delay seconds.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_timer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated timer — async_timer","text":"async_timer [event_emitter] object timeout event. possible add multiple listeners event, timer created. Note, however, removing listeners cancel timer, timeout events still emitted usual. proper cancellation need call cancel() method. possible create async_timer objects asynchronous context, .e. within synchronise() run_event_loop() call. synchronise() call finishes soon returned deferred value resolved (rejected), even timers still active. active timers automatically cancelled case.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_timer.html","id":"errors","dir":"Reference","previous_headings":"","what":"Errors","title":"Repeated timer — async_timer","text":"Errors handled way generic event emitters. .e. catch errors thrown callback function, need add listener error event, see example .","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_timer.html","id":"congestion","dir":"Reference","previous_headings":"","what":"Congestion","title":"Repeated timer — async_timer","text":"async_timer real-time timer. particular, callback return time, next timer event, future timer events delayed. Even callback returns promptly, event loop might busy events, next timer event emitted time. general guarantee timing timer events.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_timer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated timer — async_timer","text":"","code":"## Call 10 times a second, cancel with 1/10 probability counter <- 0L do <- function() {   cb <- function() {     cat(\"called\\n\")     counter <<- counter + 1L     if (runif(1) < 0.1) t$cancel()   }   t <- async_timer$new(1/10, cb) }  run_event_loop(do()) #> called #> called #> called counter #> [1] 3  ## Error handling counter <- 0L do <- function() {   cb <- function() {     cat(\"called\\n\")     counter <<- counter + 1L     if (counter == 2L) stop(\"foobar\")     if (counter == 3L) t$cancel()   }   t <- async_timer$new(1/10, cb)   handler <- function(err) {     cat(\"Got error:\", sQuote(conditionMessage(err)), \", handled\\n\")   }   t$listen_on(\"error\", handler) }  run_event_loop(do()) #> called #> called #> Got error: ‘foobar’ , handled #> called counter #> [1] 3  ## Error handling at the synchonization point counter <- 0L do <- function() {   cb <- function() {     cat(\"called\\n\")     counter <<- counter + 1L     if (counter == 2L) stop(\"foobar\")     if (counter == 3L) t$cancel()   }   t <- async_timer$new(1/10, cb) }  tryCatch(run_event_loop(do()), error = function(x) x) #> called #> called #> <simpleError in lst$cb(...): foobar> counter #> [1] 2"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_try_each.html","id":null,"dir":"Reference","previous_headings":"","what":"It runs each task in series but stops whenever any of the functions were successful. If one of the tasks were successful, the callback will be passed the result of the successful task. If all tasks fail, the callback will be passed the error and result (if any) of the final attempt. — async_try_each","title":"It runs each task in series but stops whenever any of the functions were successful. If one of the tasks were successful, the callback will be passed the result of the successful task. If all tasks fail, the callback will be passed the error and result (if any) of the final attempt. — async_try_each","text":"runs task series stops whenever functions successful. one tasks successful, callback passed result successful task. tasks fail, callback passed error result () final attempt.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_try_each.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It runs each task in series but stops whenever any of the functions were successful. If one of the tasks were successful, the callback will be passed the result of the successful task. If all tasks fail, the callback will be passed the error and result (if any) of the final attempt. — async_try_each","text":"","code":"async_try_each(..., .list = list())"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_try_each.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It runs each task in series but stops whenever any of the functions were successful. If one of the tasks were successful, the callback will be passed the result of the successful task. If all tasks fail, the callback will be passed the error and result (if any) of the final attempt. — async_try_each","text":"... Deferred values run series. .list deferred values run, .list easier use programmatically.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_try_each.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It runs each task in series but stops whenever any of the functions were successful. If one of the tasks were successful, the callback will be passed the result of the successful task. If all tasks fail, the callback will be passed the error and result (if any) of the final attempt. — async_try_each","text":"Resolves result first successful deferred. Otherwise throws error. error objects failed deferreds errors member error object.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_try_each.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It runs each task in series but stops whenever any of the functions were successful. If one of the tasks were successful, the callback will be passed the result of the successful task. If all tasks fail, the callback will be passed the error and result (if any) of the final attempt. — async_try_each","text":"","code":"do <- function() {   async_try_each(     async(function() stop(\"doh\"))(),     async(function() \"cool\")(),     async(function() stop(\"doh2\"))(),     async(function() \"cool2\")()   ) } synchronise(do()) #> [1] \"cool\""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_until.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly call task until it its test function returns TRUE — async_until","title":"Repeatedly call task until it its test function returns TRUE — async_until","text":"Repeatedly call task test function returns TRUE","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_until.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly call task until it its test function returns TRUE — async_until","text":"","code":"async_until(test, task, ...)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_until.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly call task until it its test function returns TRUE — async_until","text":"test Synchronous test function. task Asynchronous function call repeatedly. ... Arguments pass task.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_until.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly call task until it its test function returns TRUE — async_until","text":"Deferred value, resolved iteration done.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_until.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly call task until it its test function returns TRUE — async_until","text":"","code":"## Keep calling until it \"returns\" a number less than < 0.1 calls <- 0 number <- Inf synchronise(async_until(   function() number < 0.1,   function() {     calls <<- calls + 1     number <<- runif(1)   } )) #> [1] 0.03424133 calls #> [1] 8"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_whilst.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly call task, while test returns true — async_whilst","title":"Repeatedly call task, while test returns true — async_whilst","text":"Repeatedly call task, test returns true","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_whilst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly call task, while test returns true — async_whilst","text":"","code":"async_whilst(test, task, ...)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_whilst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly call task, while test returns true — async_whilst","text":"test Synchronous test function. task Asynchronous function call repeatedly. ... Arguments pass task.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_whilst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly call task, while test returns true — async_whilst","text":"Deferred value, resolved iteration done.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/async_whilst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly call task, while test returns true — async_whilst","text":"","code":"## Keep calling while result is bigger than 0.1 calls <- 0 number <- Inf synchronise(async_whilst(   function() number >= 0.1,   function() {     calls <<- calls + 1     number <<- runif(1)   } )) #> [1] 0.06366146 calls #> [1] 5"},{"path":"https://dereckmezquita.github.io/fork-async/reference/call_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous function call, in a worker pool — call_function","title":"Asynchronous function call, in a worker pool — call_function","text":"function called another process, much like callr::r().","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/call_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous function call, in a worker pool — call_function","text":"","code":"call_function(func, args = list())"},{"path":"https://dereckmezquita.github.io/fork-async/reference/call_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous function call, in a worker pool — call_function","text":"func Function call. See also notes callr::r(). args Arguments pass function. copied worker process.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/call_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asynchronous function call, in a worker pool — call_function","text":"Deferred object.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/call_with_callback.html","id":null,"dir":"Reference","previous_headings":"","what":"Call func and then call callback with the result — call_with_callback","title":"Call func and then call callback with the result — call_with_callback","text":"callback called two arguments, first one error object func() threw error, NULL otherwise. second argument NULL error, result func() otherwise.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/call_with_callback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call func and then call callback with the result — call_with_callback","text":"","code":"call_with_callback(func, callback, info = NULL)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/call_with_callback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call func and then call callback with the result — call_with_callback","text":"func Function call. callback Callback call result func(), error thrown. info Extra info add error object. Must named list.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/def__make_error_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an error object for a rejected deferred computation — def__make_error_object","title":"Create an error object for a rejected deferred computation — def__make_error_object","text":"Make sure error error object. Make sure error correct classes.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/def__make_error_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an error object for a rejected deferred computation — def__make_error_object","text":"","code":"def__make_error_object(self, private, err)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/def__make_error_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an error object for a rejected deferred computation — def__make_error_object","text":"self self private private self","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/def__make_error_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an error object for a rejected deferred computation — def__make_error_object","text":"error object","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":null,"dir":"Reference","previous_headings":"","what":"Deferred value — deferred","title":"Deferred value — deferred","text":"Deferred value","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deferred value — deferred","text":"","code":"dx <- deferred$new(action = NULL, on_progress = NULL, on_cancel = NULL,          parents = NULL, parent_resolve = NULL, parent_reject = NULL,          type = NULL) dx$then(on_fulfilled) dx$catch(...) dx$finally(on_finally) dx$cancel(reason = \"Cancelled\") dx$share()"},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deferred value — deferred","text":"action: Function call deferred value starts running. needs least two arguments: resolve reject, third progress argument optional. See details . on_progress: function call report progress. See details . on_cancel: function call deferred cancelled. See details . parents: list deferred values parents deferred value created. already owned, error thrown. parent_resolve: function call parent resolved. See details . parent_reject: function call parent throws error. See details . type: label can used indicate type deferred value create. might useful debugging, otherwise used. on_fulfilled: Function call parent deferred resolved. Essentially parent_resolve function () deferred. ... Error handlers, tryCatch(), see details . on_finally: Function call, deferred value resolved thrown error. called without arguments. reason Error message error object used cancel deferred.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"deferred-values","dir":"Reference","previous_headings":"","what":"Deferred values","title":"Deferred value — deferred","text":"Asynchronous computation represented deferred values. deferred value R6 object.   Creates new deferred value. action function called deferred value started (.e. dx created). must one two arguments: resolve, resolve progress call resolve done, final value deferred argument. (See examples .) two arguments, second one callback function creating progress bars. deferred value may report progress function. See details Progress bars section . action called evaluation deferred value started. deferred values needed calculate value async phase, evaluated. (See also Lazy Evaluation .) Note action optional, deferred values, action takes started. (typically depend parent nodes.) on_cancel function called without arguments deferred value cancelled. includes explicit cancellation calling $cancel() method, auto-cancellation (see ). parents list deferred values need computed current deferred value. parent deferred resolved, parent_resolve function called. parent referred throws error, parent_reject` function called. parent_resolve function () two arguments: value resolve. called value parent, resolve callback deferred. parent_resolve can resolve deferred calling supplied resolve callback, can keep waiting parents /external computation. may throw error fail deferred. parent_resolve allows shorthands well: NULL: deferred resolved value parent. function arguments: function called, deferred resolves return value. function one argument: function called value parent argument, deferred resolved return value. function arguments value resolve. function called value parent, resolve callback deferred. parent_reject function () two arguments: value, resolve. called error object thrown parent. parent_resolve can resolve deferred calling supplied resolve callback, can keep waiting parents /external computation. may throw error fail deferred. may also re-throw error received parent, wish handle . parent_reject also accepts shorthands well: NULL: deferred throws error parent. function arguments: function called, deferred resolves return value. function one argument: function called value parent argument, deferred resolved return value. function arguments value resolve. function called value parent, resolve callback deferred. list named error handlers, corresponding error handlers $catch() (tryCatch()). error handlers handle parent's error, deferred resolved result handlers. Otherwise deferred failed parent's error. error handlers may also throw new error.","code":"deferred$new(action = NULL, on_progress = NULL, on_cancel = NULL,    parents = NULL, parent_resolve = NULL, parent_reject = NULL,    type = NULL)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error handling","title":"Deferred value — deferred","text":"action function deferred, also parent_resolve parent_reject handlers may throw errors deferred computed. Errors can handled wit $catch() member function:   takes named error handler arguments tryCatch(). Technically, $catch() creates new deferred value, new deferred value resolved result error handlers. handlers handle error, new deferred fail error. $finally() method can used run create finalizer code runs deferred resolved fails. can used close database connections resources:   Technically, $finally() creates new deferred, resolve fail way original one, call on_finally function arguments.","code":"dx$catch(...) dx$finally(on_finally)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"builtin-async-functions","dir":"Reference","previous_headings":"","what":"Builtin async functions","title":"Deferred value — deferred","text":"async package comes basic async functions: delay() sets timer resolves TRUE. async_constant() resolves successfully argument. http_get() http_head() make HTTP GET HEAD requests.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"combining-async-values","dir":"Reference","previous_headings":"","what":"Combining async values","title":"Deferred value — deferred","text":"Async computation (just like ordinary sync computation) usually consists several steps needs performed specified order. $() method specifies step computation needs performed deferred value known:   on_fulfilled function zero one formal arguments. called result deferred known, result. (result omitted arguments). $() creates another deferred value, resolve result on_fulfilled callback. callback return deferred value, $() deferred value child newly creted deferred, resolve . See also when_all(), when_some() when_any(), can combine multiple deferred values one. call $() (when_any(), when_all(), etc. deferred value multiple times, unless shared deferred value. See Ownership . async_reflect(), async_retry(), async_sequence(), async_timeout(), async_until() async_whilst() functions helpers complex async control flow.","code":"dx$then(on_fulfilled)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"ownership","dir":"Reference","previous_headings":"","what":"Ownership","title":"Deferred value — deferred","text":"async follows strong ownership model. deferred value must owned exactly one deferred value  (unless shared, see ). dx2 <- dx$() call, dx deferred owned newly created deferred value. (applied when_any(), etc.) means possible call $() deferred value multiple times. deferred value synchronized calling synchronise() , owned synchronise(), see Synchronization . deferred values async phase form directed graph, call async DAG (directed, acyclic graph). Usually (deferred shared, see ), DAG rooted tree, root tree synchronised deferred, final result async phase.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"shared-deferred-values","dir":"Reference","previous_headings":"","what":"Shared Deferred Values","title":"Deferred value — deferred","text":"rare cases strong ownership model restrictive, deferred value can marked shared:   following implications: shared deferred value can multiple children (owners) async DAG. shared deferred value started first child started. shared deferred value auto-cancelled children finished. (might children future.) shared deferred value still auto-cancelled end event loop. Use shared deferred values sparingly, really needed, forbid auto-cancellation, deferred values hold resources longer, async phase finished.","code":"dx$share()"},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"synchronization","dir":"Reference","previous_headings":"","what":"Synchronization","title":"Deferred value — deferred","text":"async allows embedding asynchronous computation synchronous code. execution program sync phase async phases. program starts, sync phase. sync phase create deferred values. (can still define (async) functions, create deferred values called.) enter async phase, call synchronise() expression evaluates deferred value. async phase last deferred value computed error thrown (error reaches synchronise()). synchronise() creates event loop, manages computation deferred values particular async phase. Async phases can embedded . .e. program may call synchronise() async phase. outer async phase's event loop stops inner async phase terminates. Deferred values passed synchronise() barrier, anoter (sync async phase). happen, error reported first operation leaked deferred value. typical application, function implemented asynchronously, used synchronously interactive user, another piece synchronous code, via synchronise() calls. following example makes three HTTP requests parallel:   async function can also used asychronously, parent another deferred value, async phase.","code":"http_status3 <- function() {   http_status <- function(url) {     http_get(url)$then(function(response) response$status_code)   }   r1 <- http_status(\"https://eu.httpbin.org/status/403\")   r2 <- http_status(\"https://eu.httpbin.org/status/404\")   r3 <- http_status(\"https://eu.httpbin.org/status/200\")   when_all(r1, r2, r3) } synchronise(http_status3())"},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"lazy-evaluation","dir":"Reference","previous_headings":"","what":"Lazy evaluation","title":"Deferred value — deferred","text":"async evaluate deferred values part async DAG async phase. clearly needed compute result async phase, waste resources working . (also unclear errors handled.) following example, d1 d2 created, part async DAG, never evaluated.","code":"do <- function() {   d1 <- delay(1/100)$then(function() print(\"d1\"))   d2 <- d1$then(function() print(\"d2\"))   d3 <- delay(1/100)$then(function() print(\"d3\"))   d4 <- d3$then(function() print(\"d4\"))   d4 } invisible(synchronise(do()))"},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"cancellation","dir":"Reference","previous_headings":"","what":"Cancellation","title":"Deferred value — deferred","text":"computation deferred can cancelled needed :   fail children deferred, unless completed already. also auto-cancel parent DAG deferred, unless shared deferreds, see next Section.","code":"dx$cancel(reason = \"Cancelled\")"},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"auto-cancellation","dir":"Reference","previous_headings":"","what":"Auto-cancellation","title":"Deferred value — deferred","text":"async phase, might happen parts async DAG needed final result . E.g. parent when_all() node throws error, parents computed. case event loop phase automatically cancels deferred values. Similarly, single parent when_any() node resolved, parents can cancelled. general, node async DAG resolved, whole directed DAG, rooted node, can cancelled (except nodes already resolved nodes already failed). Auto-cancellation convenient, can sure resources free soon needed. practical examples: Making HTTP requests many mirror web sites, check response time. soon first reply , rest HTTP requests cancelled. multi-process computation, soon one process fails, rest automatically cancelled. (Unless failure handled, course.) async also another type cancellation, synchronise() interrupted externally, either user system error. case processes resources created event loop, cancelled freed. Shared deferred values (see $share()) auto-cancelled children resolved errored, always cancelled end async phase.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress bars","title":"Deferred value — deferred","text":"deferred value may report progress, action progress callback. progress callback called list describes event. suggest always event entry, simple string. rest list entries can defined needed, typically counter counting ticks, ratio describing part computation already. See http_get() async function reports progress.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"collections-helper-functions","dir":"Reference","previous_headings":"","what":"Collections helper functions","title":"Deferred value — deferred","text":"async provides utilities make easier deal collections deferred values: current iterators: async_map() applies async function elements vector list (collection). async_detect() finds element collection passed async truth test. async_every() checks every element collection satisfies async predicate. async_some() checks element . async_filter() keeps elements pass async truth test.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"control-flow-helper-functions","dir":"Reference","previous_headings":"","what":"Control flow helper functions","title":"Deferred value — deferred","text":"Control flow deferred values can challenging. helpers: async_reflect() creates async function always succeeds. useful want apply collection, want stop first error. async_retry() tries async function number times. async_retryable() turns regular function retryable one. async_sequence() chains two async functions. Calling sequence equivalent calling '$()` , async_sequence() easier use programmatically. async_until() async_whilst() let call async function repeatedly, (syncronous) condition holds. async_timeout() runs async function timeout.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/deferred.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deferred value — deferred","text":"Please see README vignettes examples.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/delay.html","id":null,"dir":"Reference","previous_headings":"","what":"Delay async computation for the specified time — delay","title":"Delay async computation for the specified time — delay","text":"Since R single-threaded, deferred value might resolved (much) later specified time period.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/delay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delay async computation for the specified time — delay","text":"","code":"delay(delay)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/delay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delay async computation for the specified time — delay","text":"delay Time interval seconds, amount time delay delay execution. can fraction second.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/delay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delay async computation for the specified time — delay","text":"deferred object.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/delay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delay async computation for the specified time — delay","text":"","code":"# \\donttest{ ## Two HEAD requests with 1/2 sec delay between them resp <- list() afun <- async(function() {   http_head(\"https://eu.httpbin.org?q=2\")$     then(function(value) resp[[1]] <<- value$status_code)$     then(function(...) delay(1/2))$     then(function(...) http_head(\"https://eu.httpbin.org?q=2\"))$     then(function(value) resp[[2]] <<- value$status_code) }) synchronise(afun()) #> [1] 200 resp #> [[1]] #> [1] 200 #>  #> [[2]] #> [1] 200 #>  # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/event_emitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Event Emitter — event_emitter","title":"Generic Event Emitter — event_emitter","text":"generic class can used create event emitters. mostly modelled 'node.js' EventEmitter class","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/event_emitter.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Event Emitter — event_emitter","text":"","code":"ee <- event_emitter$new(async = TRUE) ee$listen_on(event, callback) ee$listen_off(event, callback) ee$listen_once(event, callback) ee$emit(event, ...) ee$get_event_names() ee$get_listener_count(event) ee$remove_all_listeners(event)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/event_emitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Event Emitter — event_emitter","text":"async: Whether call listeners asynchronously, .e. next tick event loop. event: String, name event. callback: Function, listener call event emitted. arguments must match arguments passed $emit() method. possible add callback function multiple times listener. called many times, many times added. ...: Arguments pass listeners. can named unnnamed.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/event_emitter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic Event Emitter — event_emitter","text":"ee$listen_on() adds callback new listener event. always added end listener list. Listeners called order added. returns reference event_emitter object, calls can chained. ee$listen_off() removes first instance callback listener list event. uses base::identical() find listener remove. callback among listeners, nothing happens. Note call method event handler, affect already emitted events. returns reference event_emitter object, calls can chained. ee$listen_once similar ee$listen_on(), callback called single event, removed. (Technically, listener removed callback called.) returns reference event_emitter object, calls can chained. ee$emit() emits event. listeners listener list called, order added. arguments passed listeners, compatible . ee$get_event_names() returns names active events, character vector. event active least one listener. ee$get_listener_count() returns number listeners event. ee$remove_all_listener()  removes listeners event.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/event_emitter.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error handling","title":"Generic Event Emitter — event_emitter","text":"Errors handled special error events. listener errors, event emitter active error event (.e. listeners exist error, listeners called, order specified. receive originally thrown error object single argument. error object event entry, contains event name failed listener called . event emitter listeners error event, throws error. error propagates next synchronization barrier, .e. last synchronise() run_event_loop() call, fails. error happen within error listener, happens, last synchronise() run_event_loop() call fails. can wrap body error listeners tryCatch() call, want avoid .","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/external_process.html","id":null,"dir":"Reference","previous_headings":"","what":"External process via a process generator — external_process","title":"External process via a process generator — external_process","text":"Wrap processx::process object deferred value. process created generator function.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/external_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"External process via a process generator — external_process","text":"","code":"external_process(process_generator, error_on_status = TRUE, ...)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/external_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"External process via a process generator — external_process","text":"process_generator Function returns processx::process object. See details current requirements returned process. error_on_status Whether fail process terminates non-zero exit status. ... Extra arguments, passed process_generator.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/external_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"External process via a process generator — external_process","text":"Deferred object. Current requirements process_generator: must take ... argument, pass processx::process$new(). must use poll_connection = TRUE argument. requirements might relaxed future. want obtain standard output /error process, process_generator must redirect files. want discard , process_generator can set NULL. process_generator use pipes (\"|\") standard output error, process stop running pipe buffer gets full. currently never read pipe buffer.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/external_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"External process via a process generator — external_process","text":"","code":"if (FALSE) { # \\dontrun{ lsgen <- function(dir = \".\", ...) {   processx::process$new(     \"ls\",     dir,     poll_connection = TRUE,     stdout = tempfile(),     stderr = tempfile(),     ...   ) } afun <- function() {   external_process(lsgen) } synchronise(afun()) } # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous HTTP GET request — http_get","title":"Asynchronous HTTP GET request — http_get","text":"Start HTTP GET request background, report completion via deferred.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous HTTP GET request — http_get","text":"","code":"http_get(   url,   headers = character(),   file = NULL,   options = list(),   on_progress = NULL )"},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous HTTP GET request — http_get","text":"url URL connect . headers HTTP headers send. file NULL, must string, specifying file. body response written file. options Options set handle. Passed curl::handle_setopt(). on_progress Progress handler function. used response body written file. See details .","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asynchronous HTTP GET request — http_get","text":"Deferred object.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_get.html","id":"http-event-emitters","dir":"Reference","previous_headings":"","what":"HTTP event emitters","title":"Asynchronous HTTP GET request — http_get","text":"async HTTP deferred object also event emitter, see event_emitter. Use $event_emitter access event emitter API, call $event_emitter$listen_on() etc. listen HTTP events, etc. \"data\" emitted receive data server, data passed listeners raw vector. Note zero-length raw vectors might also happen. \"end\" emitted end HTTP data stream, without additional arguments (Also error.) example, uses web server webfakes package:","code":"http <- webfakes::new_app_process(webfakes::httpbin_app()) stream_http <- function() {   query <- http_get(http$url(\"/drip?duration=3&numbytes=10\"))   query$event_emitter$     listen_on(\"data\", function(bytes) {       writeLines(paste(\"Got\", length(bytes), \"byte(s):\"))       print(bytes)     })$     listen_on(\"end\", function() {       writeLines(\"Done.\")     })   query }  response <- synchronise(stream_http())"},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_get.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress bars","title":"Asynchronous HTTP GET request — http_get","text":"http_get can report progress download, via on_progress argument. called list, entries: url: specified url download handle: curl handle request. can queried using curl::handle_data() get response status_code, final URL (redirections), timings, etc. file: file argument. total: total bytes response. unknown, set zero. current: already received bytes response.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asynchronous HTTP GET request — http_get","text":"","code":"# \\donttest{ afun <- async(function() {   http_get(\"https://eu.httpbin.org/status/200\")$     then(function(x) x$status_code) }) synchronise(afun()) #> [1] 200 # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_head.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous HTTP HEAD request — http_head","title":"Asynchronous HTTP HEAD request — http_head","text":"async HTTP deferred object also event emitter, see http_get() details, also event_emitter.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_head.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous HTTP HEAD request — http_head","text":"","code":"http_head(   url,   headers = character(),   file = NULL,   options = list(),   on_progress = NULL )"},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_head.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous HTTP HEAD request — http_head","text":"url URL connect . headers HTTP headers send. file NULL, must string, specifying file. body response written file. options Options set handle. Passed curl::handle_setopt(). on_progress Progress handler function. used response body written file. See details .","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_head.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asynchronous HTTP HEAD request — http_head","text":"Deferred object.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_head.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asynchronous HTTP HEAD request — http_head","text":"","code":"# \\donttest{ afun <- async(function() {   dx <- http_head(\"https://eu.httpbin.org/status/200\")$     then(function(x) x$status_code) }) synchronise(afun()) #> [1] 200  # Check a list of URLs in parallel afun <- function(urls) {   when_all(.list = lapply(urls, http_head))$     then(function(x) lapply(x, \"[[\", \"status_code\")) } urls <- c(\"https://google.com\", \"https://eu.httpbin.org\") synchronise(afun(urls)) #> [[1]] #> [1] 200 #>  #> [[2]] #> [1] 200 #>  # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous HTTP POST request — http_post","title":"Asynchronous HTTP POST request — http_post","text":"Start HTTP POST request background, report completion via deferred value.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous HTTP POST request — http_post","text":"","code":"http_post(   url,   data = NULL,   data_file = NULL,   data_form = NULL,   headers = character(),   file = NULL,   options = list(),   on_progress = NULL )"},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous HTTP POST request — http_post","text":"url URL connect . data Data send. Either raw vector, character string converted raw base::charToRaw. one data, data_file data_form can non NULL. data_file Data file send. one data, data_file data_form can non NULL. data_form Form data send. name list, element created either curl::form_data() curl::form_file(). one data, data_file data_form can non NULL. headers HTTP headers send. file NULL, must string, specifying file. body response written file. options Options set handle. Passed curl::handle_setopt(). on_progress Progress handler function. used response body written file. See details http_get().","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_post.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Asynchronous HTTP POST request — http_post","text":"async HTTP deferred object also event emitter, see http_get() details, also event_emitter.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_post.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asynchronous HTTP POST request — http_post","text":"","code":"json <- jsonlite::toJSON(list(baz = 100, foo = \"bar\"))  do <- function() {   headers <- c(\"content-type\" = \"application/json\")   http_post(\"https://eu.httpbin.org/post\", data = json, headers = headers)$     then(http_stop_for_status)$     then(function(x) {       jsonlite::fromJSON(rawToChar(x$content))$json     }) }  synchronise(do()) #> $baz #> [1] 100 #>  #> $foo #> [1] \"bar\" #>"},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_setopt.html","id":null,"dir":"Reference","previous_headings":"","what":"Set curl HTTP options in an event loop — http_setopt","title":"Set curl HTTP options in an event loop — http_setopt","text":"event loop must already running. words, can call function async functions.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_setopt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set curl HTTP options in an event loop — http_setopt","text":"","code":"http_setopt(total_con = NULL, host_con = NULL, multiplex = NULL)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_setopt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set curl HTTP options in an event loop — http_setopt","text":"total_con, host_con, multiplex passed curl::multi_set(). argument NULL (default) ignored.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_setopt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set curl HTTP options in an event loop — http_setopt","text":"default values set first deferred HTTP operation event loop created, taken async_http_total_con, async_http_host_con async_http_multiplex options.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_stop_for_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Throw R errors for HTTP errors — http_stop_for_status","title":"Throw R errors for HTTP errors — http_stop_for_status","text":"Status codes 400 considered successful, others trigger errors. Note different httr package, considers 3xx status code errors well.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_stop_for_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Throw R errors for HTTP errors — http_stop_for_status","text":"","code":"http_stop_for_status(resp)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_stop_for_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Throw R errors for HTTP errors — http_stop_for_status","text":"resp HTTP response http_get(), http_head(), etc.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_stop_for_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Throw R errors for HTTP errors — http_stop_for_status","text":"HTTP response invisibly, considered successful. Otherwise error thrown.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/http_stop_for_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Throw R errors for HTTP errors — http_stop_for_status","text":"","code":"# \\donttest{ afun <- async(function() {   http_get(\"https://eu.httpbin.org/status/404\")$     then(http_stop_for_status) })  tryCatch(synchronise(afun()), error = function(e) e) #> <async error: Not Found (HTTP 404). #>  in *parent* callback of `http_get(\"https://eu.httpbin.org/status/404\")$then` at ./<text>:3:3> # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/is_async.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a function is async — is_async","title":"Checks if a function is async — is_async","text":"fun function, error thrown.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/is_async.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a function is async — is_async","text":"","code":"is_async(fun)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/is_async.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a function is async — is_async","text":"fun Function.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/is_async.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a function is async — is_async","text":"Logical scalar, whether fun async.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/is_async.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks if a function is async — is_async","text":"Currently, checks async attribute, set async().","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/is_async.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a function is async — is_async","text":"","code":"f <- function(x) 42 af <- async(f) is_async(f) #> [1] FALSE is_async(af) #> [1] TRUE f() #> [1] 42 synchronise(dx <- af()) #> [1] 42 dx #> <deferred> #>   Public: #>     cancel: function (reason = \"Cancelled\")  #>     catch: function (...)  #>     clone: function (deep = FALSE)  #>     event_emitter: NULL #>     finally: function (on_finally)  #>     initialize: function (action = NULL, on_progress = NULL, on_cancel = NULL,  #>     share: function ()  #>     then: function (on_fulfilled)  #>   Private: #>     action: NULL #>     add_as_parent: function (child)  #>     cancel_callback: NULL #>     cancelled: FALSE #>     children: list #>     dead_end: FALSE #>     event_loop: event_loop, R6 #>     get_info: function ()  #>     id: 254 #>     make_error_object: function (err)  #>     maybe_cancel_parents: function (reason)  #>     mycall: call #>     null: function ()  #>     parent_reject: function (value, resolve)  #>     parent_resolve: function (value, resolve)  #>     parents: NULL #>     progress: function (data)  #>     progress_callback: NULL #>     reject: function (reason)  #>     resolve: function (value)  #>     run_action: function ()  #>     running: TRUE #>     shared: FALSE #>     state: fulfilled #>     type: async #>     update_parent: function (old, new)  #>     value: 42"},{"path":"https://dereckmezquita.github.io/fork-async/reference/is_deferred.html","id":null,"dir":"Reference","previous_headings":"","what":"Is object a deferred value? — is_deferred","title":"Is object a deferred value? — is_deferred","text":"object deferred value?","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/is_deferred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is object a deferred value? — is_deferred","text":"","code":"is_deferred(x)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/is_deferred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is object a deferred value? — is_deferred","text":"x object","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/is_deferred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is object a deferred value? — is_deferred","text":"Whether deferred value.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/is_deferred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is object a deferred value? — is_deferred","text":"","code":"is_deferred(1:10) #> [1] FALSE afun <- function() {   print(is_deferred(dx <- delay(1/100)))   dx } synchronise(afun()) #> [1] TRUE #> [1] TRUE"},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_event_loop.html","id":null,"dir":"Reference","previous_headings":"","what":"Run event loop to completion — run_event_loop","title":"Run event loop to completion — run_event_loop","text":"Creates new event loop, evaluates expr , runs event loop completion. stops event loop tasks.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_event_loop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run event loop to completion — run_event_loop","text":"","code":"run_event_loop(expr)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_event_loop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run event loop to completion — run_event_loop","text":"expr Expression run creating new event loop.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_event_loop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run event loop to completion — run_event_loop","text":"NULL, always. event loop return value, can use lexical scoping, see example .","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_event_loop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run event loop to completion — run_event_loop","text":"expression typically creates event loop tasks. create deferred values, though, never evaluated. Unhandled errors propagate run_event_loop() call, fails. case (unhandled) error, event loop tasks cancelled.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_event_loop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run event loop to completion — run_event_loop","text":"","code":"counter <- 0L do <- function() {   callback <- function() {     counter <<- counter + 1L     if (runif(1) < 1/10) t$cancel()   }   t <- async_timer$new(1/1000, callback) } run_event_loop(do()) counter #> [1] 9"},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous external process execution — run_process","title":"Asynchronous external process execution — run_process","text":"Start external process background, report completion via deferred.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous external process execution — run_process","text":"","code":"run_process(   command = NULL,   args = character(),   error_on_status = TRUE,   wd = NULL,   env = NULL,   windows_verbatim_args = FALSE,   windows_hide_window = FALSE,   encoding = \"\",   ... )"},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous external process execution — run_process","text":"command Character scalar, command run. running .bat .cmd files Windows, make sure read 'Batch files' section process manual page. args Character vector, arguments command. error_on_status Whether reject referred value program exits non-zero status. wd Working directory process. NULL, current working directory used. env Environment variables child process. NULL, parent's environment inherited. Windows, many programs function correctly environment variables set, always set HOMEDRIVE, HOMEPATH, LOGONSERVER, PATH, SYSTEMDRIVE, SYSTEMROOT, TEMP, USERDOMAIN, USERNAME, USERPROFILE WINDIR. append new environment variables ones set current process, specify \"current\" env, without name, appended ones names. appended ones can overwrite current ones. windows_verbatim_args Whether omit escaping command arguments windows. Ignored platforms. windows_hide_window Whether hide window application windows. Ignored platforms. encoding encoding assume stdout stderr. default encoding current locale used. Note processx always reencodes output streams UTF-8 currently. ... Extra arguments passed process$new(), see process. Note pass stout stderr , used internally run(). can use stdout_callback, stderr_callback, etc. arguments manage standard output error, process class directly need flexibility.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asynchronous external process execution — run_process","text":"Deferred object.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asynchronous external process execution — run_process","text":"","code":"if (FALSE) { # \\dontrun{ afun <- function() {   run_process(\"ls\", \"-l\")$     then(function(x) strsplit(x$stdout, \"\\r?\\n\")[[1]]) } synchronise(afun()) } # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_r_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous call to an R function, in a background R process — run_r_process","title":"Asynchronous call to an R function, in a background R process — run_r_process","text":"Start background R process evaluate function call . uses callr::r_process internally.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_r_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous call to an R function, in a background R process — run_r_process","text":"","code":"run_r_process(   func,   args = list(),   libpath = .libPaths(),   repos = c(getOption(\"repos\"), c(CRAN = \"https://cloud.r-project.org\")),   cmdargs = c(\"--no-site-file\", \"--slave\", \"--no-save\", \"--no-restore\"),   system_profile = FALSE,   user_profile = FALSE,   env = callr::rcmd_safe_env() )"},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_r_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous call to an R function, in a background R process — run_r_process","text":"func Function object call new R process. function self-contained refer functions use variables explicitly packages using :: notation. default environment function set .GlobalEnv passing child process. (See package option want keep environment.) , good practice create anonymous function pass callr, instead passing function object (base ) package. particular   work, .libPaths defined special environment,   works just fine. args Arguments pass function. Must list. libpath library path. repos repos option. NULL, repos option set. options used user_profile system_profile set FALSE, set using system user profile. cmdargs Command line arguments pass R process. Note c(\"-f\", rscript) appended , rscript name script file run. contains call supplied function error handling code. system_profile Whether use system profile file. user_profile Whether use user's profile file. \"project\", profile working directory used, R_PROFILE_USER environment variable user level profile . See also \"Security considerations\" . env Environment variables set child process.","code":"r(.libPaths) r(function() .libPaths())"},{"path":"https://dereckmezquita.github.io/fork-async/reference/run_r_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asynchronous call to an R function, in a background R process — run_r_process","text":"","code":"if (FALSE) { # \\dontrun{ afun <- function() {   run_r_process(function() Sys.getpid()) } synchronise(afun()) } # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/sse_events.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP event emitter for server-sent events — sse_events","title":"HTTP event emitter for server-sent events — sse_events","text":"Server-sent events technique stream events web server client, open HTTP connection.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/sse_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HTTP event emitter for server-sent events — sse_events","text":"class implements event emitter async HTTP query created http_get() friends, fires \"event\" event server sends event. \"end\" event emitted server closes connection. event named character vector, names keys events. Example using built-toy web app:","code":"http <- webfakes::new_app_process(async:::sseapp()) stream_events <- function() {   query <- http_get(http$url(\"/sse\"))   sse <- sse_events$new(query)   sse$     listen_on(\"event\", function(event) {       writeLines(\"Got an event:\")       print(event)     })$     listen_on(\"end\", function() {       writeLines(\"Done.\")     })   query }  response <- synchronise(stream_events())"},{"path":"https://dereckmezquita.github.io/fork-async/reference/synchronise.html","id":null,"dir":"Reference","previous_headings":"","what":"Synchronously wrap asynchronous code — synchronise","title":"Synchronously wrap asynchronous code — synchronise","text":"Evaluate expression async phase. creates event loop, evaluates supplied expression. result deferred value, keeps running event loop, deferred value resolved, returns resolved value.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/synchronise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synchronously wrap asynchronous code — synchronise","text":"","code":"synchronise(expr)"},{"path":"https://dereckmezquita.github.io/fork-async/reference/synchronise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synchronously wrap asynchronous code — synchronise","text":"expr Async function call expression. evaluate deferred value, just returned.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/synchronise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synchronously wrap asynchronous code — synchronise","text":"error handled async phase, synchronise() re-throw error. synchronise() cancels async processes interrupt external error.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/synchronise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synchronously wrap asynchronous code — synchronise","text":"","code":"# \\donttest{ http_status <- function(url, ...) {   http_get(url, ...)$     then(function(x) x$status_code) }  synchronise(http_status(\"https://eu.httpbin.org/status/418\")) #> [1] 418 # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/when_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Deferred value for a set of deferred values — when_all","title":"Deferred value for a set of deferred values — when_all","text":"Create deferred value resolved listed deferred values resolved. Note error input deferred value triggers error when_all well.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/when_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deferred value for a set of deferred values — when_all","text":"","code":"when_all(..., .list = list())"},{"path":"https://dereckmezquita.github.io/fork-async/reference/when_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deferred value for a set of deferred values — when_all","text":"... Deferred values. .list deferred values.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/when_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deferred value for a set of deferred values — when_all","text":"deferred value, conditioned deferred values ... .list.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/when_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deferred value for a set of deferred values — when_all","text":"async auto-cancellation, one deferred value errors, rest automatically cancelled.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/when_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deferred value for a set of deferred values — when_all","text":"","code":"# \\donttest{ ## Check that the contents of two URLs are the same afun <- async(function() {   u1 <- http_get(\"https://eu.httpbin.org\")   u2 <- http_get(\"https://eu.httpbin.org/get\")   when_all(u1, u2)$     then(function(x) identical(x[[1]]$content, x[[2]]$content)) }) synchronise(afun()) #> [1] FALSE # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/when_some.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve a deferred as soon as some deferred from a list resolve — when_some","title":"Resolve a deferred as soon as some deferred from a list resolve — when_some","text":"when_some creates deferred value resolved soon specified number deferred values resolve.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/when_some.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve a deferred as soon as some deferred from a list resolve — when_some","text":"","code":"when_some(count, ..., .list = list())  when_any(..., .list = list())"},{"path":"https://dereckmezquita.github.io/fork-async/reference/when_some.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve a deferred as soon as some deferred from a list resolve — when_some","text":"count Number deferred values need resolve. ... Deferred values. .list deferred values.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/when_some.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve a deferred as soon as some deferred from a list resolve — when_some","text":"deferred value, conditioned deferred values ... .list.","code":""},{"path":"https://dereckmezquita.github.io/fork-async/reference/when_some.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resolve a deferred as soon as some deferred from a list resolve — when_some","text":"when_any special case single. specified number deferred values resolved, when_any throws error. async auto-cancellation, required number deferred values resolved, many throw error, rest cancelled. when_any throws error, underlying error objects returned errors member error object thrown when_any.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/fork-async/reference/when_some.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve a deferred as soon as some deferred from a list resolve — when_some","text":"","code":"# \\donttest{ ## Use the URL that returns first afun <- function() {   u1 <- http_get(\"https://eu.httpbin.org\")   u2 <- http_get(\"https://eu.httpbin.org/get\")   when_any(u1, u2)$then(function(x) x$url) } synchronise(afun()) #> [1] \"https://eu.httpbin.org/\" # }"},{"path":"https://dereckmezquita.github.io/fork-async/reference/worker_pool.html","id":null,"dir":"Reference","previous_headings":"","what":"Worker pool — worker_pool","title":"Worker pool — worker_pool","text":"worker pool functions independent event loop, allow independent testing.","code":""}]
